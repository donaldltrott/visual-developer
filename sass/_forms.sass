//
// Forms
// --------------------------------------------------


// Normalize non-controls
//
// Restyle and baseline non-control form elements.

fieldset
    padding: 0
    margin: 0
    border: 0
    // Chrome and Firefox set a `min-width: min-content;` on fieldsets,
    // so we reset that to ensure it behaves more like a standard block element.
    // See https://github.com/twbs/bootstrap/issues/12359.
    min-width: 0
    + fieldset
        margin-top: ($spacing-xxl + $spacing-lg)

legend
    display: block
    width: 100%
    padding: 0 0 $spacing-sm
    margin-bottom: $spacing-xl
    font-size: ($font-size-h4)
    line-height: inherit
    color: $legend-color
    border: 0
    font-family: "Oswald", Helvetica, Arial, sans-serif
    border-bottom: 0.1rem dashed $legend-border-color

label
    display: block
    margin-bottom: $spacing-xs
    font-weight: normal
    font-size: $font-size-small
    color: $gray-dark

// Normalize form controls
//
// While most of our form styles require extra classes, some basic normalization
// is required to ensure optimum display with or without those classes to better
// address browser inconsistencies.

// Override content-box in Normalize (* isn't specific enough)
input[type="search"]
    box-sizing: border-box

// Position radios and checkboxes better
input[type="radio"],
input[type="checkbox"]
    margin: $spacing-sm 0 0
    margin-top: 0.1rem
    \9
    // IE8-9
    line-height: normal

input[type="file"]
    display: block

// Make range inputs behave like textual form controls
input[type="range"]
    display: block
    width: 100%

// Make multiple select elements height not fixed
select[multiple],
select[size]
    height: auto

// Focus for file, radio, and checkbox
input[type="file"]:focus,
input[type="radio"]:focus,
input[type="checkbox"]:focus
    @include tab-focus

// Adjust output element
output
    display: block
    padding-top: ($spacing-sm + 0.1rem)
    font-size: $font-size-base
    line-height: $line-height-base
    color: $input-color

// Common form controls
//
// Shared size and type resets for form controls. Apply `.form-control` to any
// of the following form controls:
//
// select
// textarea
// input[type="text"]
// input[type="password"]
// input[type="datetime"]
// input[type="datetime-local"]
// input[type="date"]
// input[type="month"]
// input[type="time"]
// input[type="week"]
// input[type="number"]
// input[type="email"]
// input[type="url"]
// input[type="search"]
// input[type="tel"]
// input[type="color"]

.form-control
    display: block
    width: 100%
    //height: $input-height-base
    // Make inputs at least the height of their button counterpart (base line-height + padding + border)
    padding: $spacing-md $spacing-lg
    font-size: $font-size-base
    line-height: $line-height-base
    color: $input-color
    background-color: $input-bg
    background-image: none
    // Reset unusual Firefox-on-Android default style; see https://github.com/necolas/normalize.css/issues/214
    border: 0.1rem solid $input-border
    border-radius: $input-border-radius
    // Note: This has no effect on <select>s in some browsers, due to the limited stylability of <select>s in CSS.
    //box-shadow: inset 0 0.1rem 0.1rem rgba(0, 0, 0, .075)
    transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s
    -webkit-appearance: none

    // Customize the `:focus` state to imitate native WebKit styles.
    @include form-control-focus

    // Placeholder
    @include placeholder

    // Unstyle the caret on `<select>`s in IE10+.
    &::-ms-expand
        border: 0
        background-color: transparent

    // Disabled and read-only inputs
    //
    // HTML5 says that controls under a fieldset > legend:first-child won't be
    // disabled if the fieldset is disabled. Due to implementation difficulty, we
    // don't honor that edge case; we style them as disabled anyway.
    &[disabled],
    &[readonly],
    fieldset[disabled] &
        background-color: $input-bg-disabled
        border-color: $input-border-disabled
        opacity: 1
    // iOS fix for unreadable disabled content; see https://github.com/twbs/bootstrap/issues/11655


    &[disabled],
    fieldset[disabled] &
        cursor: $cursor-disabled

    &.input-no-label
        margin-top: 1.9rem




//// [converter] extracted textarea& to textarea.form-control
//}
//
// Reset height for `textarea`s
textarea.form-control
    height: auto
    resize: vertical

select.form-control
    -webkit-appearance: none
    -moz-appearance: none
    appearance: none
    @include svg-caret($blue)
    padding-right: $spacing-xxl + $spacing-lg

    &[disabled],
    &[readonly],
    fieldset[disabled] &
        @include svg-caret($gray-light)

select[multiple]
    @include svg-caret(transparent)
    padding-right: 0
    &[disabled],
    &[readonly],
    fieldset[disabled] &
        @include svg-caret(transparent)

//
//
//// Search inputs in iOS
////
//// This overrides the extra rounded corners on search inputs in iOS so that our
//// `.form-control` class can properly style them. Note that this cannot simply
//// be added to `.form-control` as it's not specific enough. For details, see
//// https://github.com/twbs/bootstrap/issues/11586.
//
input[type="search"]
    -webkit-appearance: none



// Special styles for iOS temporal inputs
//
// In Mobile Safari, setting `display: block` on temporal inputs causes the
// text within the input to become vertically misaligned. As a workaround, we
// set a pixel line-height that matches the given height of the input, but only
// for Safari. See https://bugs.webkit.org/show_bug.cgi?id=139848
//
// Note that as of 8.3, iOS doesn't support `datetime` or `week`.

//@media screen and (-webkit-min-device-pixel-ratio: 0)
//    input[type="date"],
//    input[type="time"],
//    input[type="datetime-local"],
//    input[type="month"]
//        &.form-control
//            line-height: $input-height-base


//    &.input-sm,
//    .input-group-sm & {
//        line-height: $input-height-small;
//}
//
//    &.input-lg,
//    .input-group-lg & {
//        line-height: $input-height-large;
//}
//}
//}
//
//
// Form groups
//
// Designed to help with the organization and spacing of vertical forms. For
// horizontal forms, use the predefined grid classes.

.form-group,
.checkbox-group,
.radio-group
    margin-bottom: $form-group-margin-bottom

.input-inline
    display: flex
    .form-control
        width: auto
        + .form-control
            margin-left: $spacing-sm
    .input-stretch
        width: 100%

    .input-decorator
        font-size: $font-size-large
        padding: 0 $spacing-md
        line-height: $font-size-base + ($spacing-lg * 2)
        color: $gray
        &.input-decorator-left
            padding-right: $spacing-sm
            padding-left: $spacing-lg
        &.input-decorator-right
            padding-left: $spacing-sm
            padding-right: $spacing-lg
        &.input-decorator-first
            padding-left: 0
        &.input-decorator-last
            padding-right: 0
        &.text-decorator
            font-size: $font-size-small


// Checkboxes and radios
//
// Indent the labels to position radios/checkboxes as hanging controls.

.radio,
.checkbox
    position: relative
    display: block
    margin-top: $spacing-lg
    margin-bottom: $spacing-lg

    label
        min-height: $line-height-computed
        // Ensure the input doesn't jump when there is no text
        padding-left: 2rem
        margin-bottom: 0
        font-weight: normal
        cursor: pointer
        user-select: none
        font-size: $font-size-base
        color: $text-color
        margin-left: 0

.radio,
.checkbox
    position: relative
    display: block
    margin-top: $spacing-lg
    margin-bottom: $spacing-lg

    label
        min-height: $line-height-computed
        // Ensure the input doesn't jump when there is no text
        padding-left: 2rem
        margin-bottom: 0
        font-weight: normal
        cursor: pointer
        user-select: none
        display: inline-block

.checkbox
    input[type="checkbox"]
        + label
            &:before
                content: ' '
                display: block
                height: 1.3rem
                width: 1.3rem
                border: 0.1rem solid $gray
                border-radius: $border-radius-small
                position: absolute
                margin-left: -2rem
                margin-top: 0.3rem
                background: $white

        &:checked
            + label
                &:after
                    font-family: FontAwesome
                    content: $fa-var-check
                    color: $blue
                    position: absolute
                    top: -0.1rem
                    left: 0.1rem

.radio
    input[type="radio"]
        + label
            &:before
                content: ' '
                display: block
                height: 1.3rem
                width: 1.3rem
                border: 1px solid $gray
                border-radius: 99rem
                position: absolute
                margin-left: -2rem
                margin-top: 0.3rem
                background: $white

        &:checked
            + label
                &:after
                    content: ' '
                    display: block
                    height: 0.7rem
                    width: 0.7rem
                    border-radius: 99rem
                    background: $blue
                    position: absolute
                    top: 0.6rem
                    left: 0.3rem

.radio input[type="radio"],
.checkbox input[type="checkbox"]
    position: absolute
    margin-top: $spacing-sm
    opacity: 0

.radio + .radio,
.checkbox + .checkbox
    margin-top: -$spacing-sm

.checkbox-group
    > label
        + .checkbox
            margin-top: $spacing-sm

.radio-group
    > label
        + .radio
            margin-top: $spacing-sm


.checkbox-group
    &.checkbox-inline
        .checkbox
            display: inline-block
            padding-right: $spacing-xxl

.radio-group
    &.radio-inline
        .radio
            display: inline-block
            padding-right: $spacing-xxl

// Apply same disabled cursor tweak as for inputs
// Some special care is needed because <label>s don't inherit their parent's `cursor`.
//
// Note: Neither radios nor checkboxes can be readonly.
.checkbox
    input[type="checkbox"]
        &[disabled],
        &.disabled
            cursor: $cursor-disabled
            + label
                cursor: $cursor-disabled
                color: $text-muted
                &:before
                    border-color: $gray-light
                    background: $gray-lightest
                &:after
                    color: $gray-light

.radio
    input[type="radio"]
        &[disabled],
        &.disabled
            cursor: $cursor-disabled
            + label
                cursor: $cursor-disabled
                color: $text-muted
                &:before
                    border-color: $gray-light
                    background: $gray-lightest
                &:after
                    background: $gray-light



//
//// Static form control text
////
//// Apply class to a `p` element to make any string of text align with labels in
//// a horizontal form layout.
//
//.form-control-static {
//    // Size it appropriately next to real form controls
//    padding-top: ($padding-base-vertical + 1);
//    padding-bottom: ($padding-base-vertical + 1);
//    // Remove default margin from `p`
//    margin-bottom: 0;
//    min-height: ($line-height-computed + $font-size-base);
//
//    &.input-lg,
//    &.input-sm {
//        padding-left: 0;
//        padding-right: 0;
//}
//}
//
//
//// Form control sizing
////
//// Build on `.form-control` with modifier classes to decrease or increase the
//// height and font-size of form controls.
////
//// The `.form-group-* form-control` variations are sadly duplicated to avoid the
//// issue documented in https://github.com/twbs/bootstrap/issues/15074.
//
//@include input-size('.input-sm', $input-height-small, $padding-small-vertical, $padding-small-horizontal, $font-size-small, $line-height-small, $input-border-radius-small);
//.form-group-sm {
//    .form-control {
//        height: $input-height-small;
//        padding: $padding-small-vertical $padding-small-horizontal;
//        font-size: $font-size-small;
//        line-height: $line-height-small;
//        border-radius: $input-border-radius-small;
//}
//    select.form-control {
//        height: $input-height-small;
//        line-height: $input-height-small;
//}
//    textarea.form-control,
//    select[multiple].form-control {
//        height: auto;
//}
//    .form-control-static {
//        height: $input-height-small;
//        min-height: ($line-height-computed + $font-size-small);
//        padding: ($padding-small-vertical + 1) $padding-small-horizontal;
//        font-size: $font-size-small;
//        line-height: $line-height-small;
//}
//}
//
//@include input-size('.input-lg', $input-height-large, $padding-large-vertical, $padding-large-horizontal, $font-size-large, $line-height-large, $input-border-radius-large);
//.form-group-lg {
//    .form-control {
//        height: $input-height-large;
//        padding: $padding-large-vertical $padding-large-horizontal;
//        font-size: $font-size-large;
//        line-height: $line-height-large;
//        border-radius: $input-border-radius-large;
//}
//    select.form-control {
//        height: $input-height-large;
//        line-height: $input-height-large;
//}
//    textarea.form-control,
//    select[multiple].form-control {
//        height: auto;
//}
//    .form-control-static {
//        height: $input-height-large;
//        min-height: ($line-height-computed + $font-size-large);
//        padding: ($padding-large-vertical + 1) $padding-large-horizontal;
//        font-size: $font-size-large;
//        line-height: $line-height-large;
//}
//}
//
//
//// Form control feedback states
////
//// Apply contextual and semantic states to individual form controls.
//
//.has-feedback {
//    // Enable absolute positioning
//    position: relative;
//
//    // Ensure icons don't overlap text
//    .form-control {
//        padding-right: ($input-height-base * 1.25);
//}
//}
//// Feedback icon (requires .glyphicon classes)
//.form-control-feedback {
//    position: absolute;
//    top: 0;
//    right: 0;
//    z-index: 2; // Ensure icon is above input groups
//    display: block;
//    width: $input-height-base;
//    height: $input-height-base;
//    line-height: $input-height-base;
//    text-align: center;
//    pointer-events: none;
//}
//.input-lg + .form-control-feedback,
//.input-group-lg + .form-control-feedback,
//.form-group-lg .form-control + .form-control-feedback {
//    width: $input-height-large;
//    height: $input-height-large;
//    line-height: $input-height-large;
//}
//.input-sm + .form-control-feedback,
//.input-group-sm + .form-control-feedback,
//.form-group-sm .form-control + .form-control-feedback {
//    width: $input-height-small;
//    height: $input-height-small;
//    line-height: $input-height-small;
//}



// Feedback states
.has-success
    @include form-control-validation($state-success-text, $state-success-border, $state-success-bg)

.has-warning
    @include form-control-validation($state-warning-text, $state-warning-border, $state-warning-bg)

.has-error
    @include form-control-validation($state-danger-text, $state-danger-border, $state-danger-bg)

.has-info
    @include form-control-validation($state-info-text, $state-info-border, $state-info-bg)


//// Reposition feedback icon if input has visible label above
//.has-feedback label {
//
//    & ~ .form-control-feedback {
//        top: ($line-height-computed + 5); // Height of the `label` and its margin
//}
//    &.sr-only ~ .form-control-feedback {
//        top: 0;
//}
//}


// Help text
//
// Apply to any element you wish to create light text for placement immediately
// below a form control. Use for general help, formatting, or instructional text.

.help-block
    display: flex
    flex-flow: row nowrap
    margin-top: $spacing-xs
    margin-bottom: $spacing-lg
    color: lighten($gray, 12%) // lighten the text some for contrast
    font-size: $font-size-small
    padding: 0 $spacing-sm

    .help-text
        flex: 1 auto

    .help-text-right
        text-align: right





//// Inline forms
////
//// Make forms appear inline(-block) by adding the `.form-inline` class. Inline
//// forms begin stacked on extra small (mobile) devices and then go inline when
//// viewports reach <768px.
////
//// Requires wrapping inputs and labels with `.form-group` for proper display of
//// default HTML form controls and our custom form controls (e.g., input groups).
////
//// Heads up! This is mixin-ed into `.navbar-form` in navbars.less.
//
//// [converter] extracted from `.form-inline` for libsass compatibility
//@mixin form-inline {
//
//    // Kick in the inline
//    @media (min-width: $screen-sm-min) {
//    // Inline-block all the things for "inline"
//    .form-group {
//        display: inline-block;
//        margin-bottom: 0;
//        vertical-align: middle;
//}
//
//    // In navbar-form, allow folks to *not* use `.form-group`
//    .form-control {
//        display: inline-block;
//        width: auto; // Prevent labels from stacking above inputs in `.form-group`
//        vertical-align: middle;
//}
//
//    // Make static controls behave like regular ones
//    .form-control-static {
//        display: inline-block;
//}
//
//    .input-group {
//        display: inline-table;
//        vertical-align: middle;
//
//        .input-group-addon,
//        .input-group-btn,
//        .form-control {
//            width: auto;
//    }
//}
//
//    // Input groups need that 100% width though
//    .input-group > .form-control {
//        width: 100%;
//}
//
//    .control-label {
//        margin-bottom: 0;
//        vertical-align: middle;
//}
//
//    // Remove default margin on radios/checkboxes that were used for stacking, and
//    // then undo the floating of radios and checkboxes to match.
//    .radio,
//    .checkbox {
//        display: inline-block;
//        margin-top: 0;
//        margin-bottom: 0;
//        vertical-align: middle;
//
//        label {
//            padding-left: 0;
//    }
//}
//    .radio input[type="radio"],
//    .checkbox input[type="checkbox"] {
//        position: relative;
//        margin-left: 0;
//}
//
//    // Re-override the feedback icon.
//    .has-feedback .form-control-feedback {
//        top: 0;
//}
//}
//}
//// [converter] extracted as `@mixin form-inline` for libsass compatibility
//.form-inline {
//    @include form-inline;
//}
//
//
//
//// Horizontal forms
////
//// Horizontal forms are built on grid classes and allow you to create forms with
//// labels on the left and inputs on the right.
//
//.form-horizontal {
//
//    // Consistent vertical alignment of radios and checkboxes
//    //
//    // Labels also get some reset styles, but that is scoped to a media query below.
//    .radio,
//    .checkbox,
//    .radio-inline,
//    .checkbox-inline {
//        margin-top: 0;
//        margin-bottom: 0;
//        padding-top: ($padding-base-vertical + 1); // Default padding plus a border
//}
//    // Account for padding we're adding to ensure the alignment and of help text
//    // and other content below items
//    .radio,
//    .checkbox {
//        min-height: ($line-height-computed + ($padding-base-vertical + 1));
//}
//
//    // Make form groups behave like rows
//    .form-group {
//        @include make-row;
//}
//
//    // Reset spacing and right align labels, but scope to media queries so that
//    // labels on narrow viewports stack the same as a default form example.
//    @media (min-width: $screen-sm-min) {
//    .control-label {
//        text-align: right;
//        margin-bottom: 0;
//        padding-top: ($padding-base-vertical + 1); // Default padding plus a border
//}
//}
//
//    // Validation states
//    //
//    // Reposition the icon because it's now within a grid column and columns have
//    // `position: relative;` on them. Also accounts for the grid gutter padding.
//    .has-feedback .form-control-feedback {
//        right: floor(($grid-gutter-width / 2));
//}
//
//    // Form group sizes
//    //
//    // Quick utility class for applying `.input-lg` and `.input-sm` styles to the
//    // inputs and labels within a `.form-group`.
//    .form-group-lg {
//        @media (min-width: $screen-sm-min) {
//        .control-label {
//            padding-top: ($padding-large-vertical + 1);
//            font-size: $font-size-large;
//    }
//    }
//}
//    .form-group-sm {
//        @media (min-width: $screen-sm-min) {
//        .control-label {
//            padding-top: ($padding-small-vertical + 1);
//            font-size: $font-size-small;
//    }
//    }
//}
//}



/*
 ##Forms

 <h3>Form Example</h3>

 Individual form controls automatically receive some global styling. All textual `<input>`, `<textarea>`,
 and `<select>` elements with `.form-control` are set to `width: 100%;` by default. Wrap labels and controls
 in `.form-group` for optimum spacing.

 ```
 <form>
    <fieldset>
        <legend>Personal Information</legend>

        <div class="row-tight">
            <div class="col-xs">
                <div class="form-group">
                    <label for="exampleFirstName">First Name</label>
                    <input type="text" class="form-control" id="exampleFirstName" placeholder="Enter First Name">
                </div>
            </div>
            <div class="col-xs">
                <div class="form-group">
                    <label for="exampleLastName">Last Name</label>
                    <input type="text" class="form-control" id="exampleLastName" placeholder="Enter Last Name">
                </div>
            </div>
        </div>
        <div class="row-tight">
            <div class="col-xs-9">
                <div class="form-group">
                    <label for="exampleAddress">Address</label>
                    <input type="text" class="form-control" id="exampleAddress" placeholder="Enter Street Address">
                </div>
            </div>
            <div class="col-xs-3">
                <div class="form-group">
                    <label for="exampleSuite">Suite #</label>
                    <input type="text" class="form-control" id="exampleSuite" placeholder="Enter Suite #">
                </div>
            </div>
        </div>
        <div class="form-group">
            <label for="exampleTextarea">Tell us about you</label>
            <textarea class="form-control" rows="5" id="exampleTextarea" placeholder="Brief life history"></textarea>
             <div class="help-block">
                <span class="help-text help-text-right">52/4000</span>
            </div>
        </div>

    </fieldset>

    <fieldset>
        <legend>Contact Information</legend>

        <div class="form-group">
            <label for="exampleEmailAddress">Email Address</label>
            <input type="email" class="form-control" id="exampleEmailAddress" placeholder="xx@xxx.xxx">
        </div>

        <div class="form-group">
            <label>Phone Number</label>
            <div class="input-inline">
                <span class="input-decorator input-decorator-left input-decorator-first">(</span>
                <input type="text" class="form-control" size="6" placeholder="xxx">
                <span class="input-decorator input-decorator-right">)</span>
                <input type="text" class="form-control" size="6" placeholder="xxx">
                <span class="input-decorator">-</span>
                <input type="text" class="form-control input-stretch" placeholder="xxxx">
                <span class="input-decorator text-decorator">Ext.</span>
                <input type="text" class="form-control" size="10" placeholder="xxxxxx">
            </div>
        </div>

        <div class="checkbox-group">
            <div class="checkbox">
                <input type="checkbox" value="" id="example-checkbox1">
                <label for="example-checkbox1">It is okay to contact me directly.</label>
            </div>
        </div>
    </fieldset>


    <fieldset>
        <button type="submit" class="btn btn-default">Submit</button>
    </fieldset>
 </form>
 ```



 <h3>Supported Controls</h3>

 Examples of standard form controls supported in an example form layout.

 <h4>Inputs</h4>

 Most common form control, text-based input fields. Includes support for all HTML5 types: `text`, `password`, `datetime`,
 `datetime-local`, `date`, `month`, `time`, `week`, `number`, `email`, `url`, `search`, `tel`, and `color`.

 ```
 <input type="text" class="form-control" placeholder="Text input">
 ```


 <h4>Textarea</h4>

 Form control which supports multiple lines of text. Change `rows` attribute as necessary.

 ```
 <textarea class="form-control" rows="3" placeholder="Textarea"></textarea>
 ```



 <h4>Checkboxes and Radios</h4>

 Checkboxes are for selecting one or several options in a list, while radios are for selecting one option
 from many.

 ```
 <div class="checkbox-group">
    <label>This is a group of checkboxes</label>
    <div class="checkbox">
        <input type="checkbox" value="" id="checkbox1" checked>
        <label for="checkbox1">Option one is this and that&mdash;be sure to include why it's great</label>
    </div>
    <div class="checkbox">
        <input type="checkbox" value="" id="checkbox2">
        <label for="checkbox2">Option tis almost as great as option one</label>
    </div>
 </div>

 <div class="radio-group">
    <label>This is a group of radio buttons</label>
    <div class="radio">
        <input type="radio" name="optionsRadios" id="optionsRadios1" value="option1" checked>
        <label for="optionsRadios1">
            Option one is this and that&mdash;be sure to include why it's great
        </label>
    </div>
    <div class="radio">
        <input type="radio" name="optionsRadios" id="optionsRadios2" value="option2">
        <label for="optionsRadios2">
            Option two can be something else and selecting it will deselect option one
        </label>
    </div>
    <div class="radio">
        <input type="radio" name="optionsRadios" id="optionsRadios3" value="option3">
        <label for="optionsRadios3">
            Option three is just one more than two
        </label>
    </div>
 </div>
 ```


 <h4>Inline Checkboxes and Radios</h4>

 Use the `.checkbox-inline` or `.radio-inline` classes on a series of `.checkbox-group` or `.radio-group` for controls
 that appear on the same line.

 ```
 <div class="checkbox-group checkbox-inline">
    <label>This is a group of checkboxes</label>
    <div class="checkbox">
        <input type="checkbox" value="" id="checkboxInline1" checked>
        <label for="checkboxInline1">Option one</label>
    </div>
    <div class="checkbox">
        <input type="checkbox" value="" id="checkboxInline2">
        <label for="checkboxInline2">Option two</label>
    </div>
 </div>

 <div class="radio-group radio-inline">
    <label>This is a group of radio buttons</label>
    <div class="radio">
        <input type="radio" name="inlineOptionsRadios" id="radioInline1" value="option1" checked>
        <label for="radioInline1">Option one</label>
    </div>
    <div class="radio">
        <input type="radio" name="inlineOptionsRadios" id="radioInline2" value="option2">
        <label for="radioInline2">Option two</label>
    </div>
    <div class="radio">
        <input type="radio" name="inlineOptionsRadios" id="radioInline3" value="option3">
        <label for="radioInline3">Option three</label>
    </div>
 </div>
 ```


 <h4>Checkboxes and Radios with no label</h4>

 Should you have no text within the `<label>`, the input is positioned as you'd expect. Remember to
 still provide some form of label  for assistive technologies (for instance, using aria-label).

 ```
 <div class="checkbox">
    <input type="checkbox" value="" id="checkboxNoLabel1" aria-label="...">
    <label for="checkboxNoLabel1"></label>
 </div>
 <div class="radio">
    <input type="radio" name="noLabelRadio" id="optionsNoLabel1" value="option1" aria-label="...">
    <label for="optionsNoLabel1"></label>
 </div>
 ```

 <h4>Selects</h4>

 Note that many native select menus—namely in Safari and Chrome—have rounded
 corners that cannot be modified via border-radius properties.

 ```
 <select class="form-control">
    <option>1</option>
    <option>2</option>
    <option>3</option>
    <option>4</option>
    <option>5</option>
 </select>
 ```


 <h3>Input without Label</h3>

 You might want to put two inputs next to each other in a grid layout, but only have one label. To line up the
 inputs you can add `.input-no-label` to one of them.
 ```
 <div class="row-tight">
    <div class="col-xs">
        <div class="form-group">
            <label for="noLabelFirstName">First Name</label>
            <input type="text" class="form-control" id="noLabelFirstName" placeholder="Enter First Name">
        </div>
    </div>
    <div class="col-xs">
        <div class="form-group">
            <input type="text" class="form-control input-no-label" placeholder="Enter Last Name">
        </div>
    </div>
 </div>
 ```


 <h3>Inline Inputs</h3>

 <h4>Example</h4>

 Inline inputs are different that add inputs next to each other in a grid layout. An input that is inline is __not__
 set to `width: 100%` so you can add multiple inputs to a single row by adding a containing `div.input-inline`
 inside of your `.form-group`
 ```
 <div class="form-group">
    <label>Phone Number</label>
    <div class="input-inline">
        <span class="input-decorator input-decorator-left input-decorator-first">(</span>
        <input type="text" class="form-control" size="3">
        <span class="input-decorator input-decorator-right">)</span>
        <input type="text" class="form-control" size="3">
        <span class="input-decorator">-</span>
        <input type="text" class="form-control">
        <span class="input-decorator text-decorator">Ext.</span>
        <input type="text" class="form-control" size="10">
    </div>
 </div>

 <hr/>

 <div class="form-group">
    <label>Date of Birth</label>
    <div class="input-inline">
        <input type="text" class="form-control"  placeholder="MM">
        <span class="input-decorator">/</span>
        <input type="text" class="form-control"  placeholder="DD">
        <span class="input-decorator">/</span>
        <select class="form-control input-stretch">
            <option>1950s</option>
            <option>1960s</option>
            <option>1970s</option>
            <option>1980s</option>
        </select>
    </div>
 </div>
 ```

 <h4>Inline Widths</h4>

 Since these inputs are not set to `width:100%;`, you need a way to regulate the width if needed. To set a specific
 width you can use the `size` attribute.
 ```
 <div class="input-inline">
    <input type="text" class="form-control" size="3">
    <input type="text" class="form-control">
    <input type="text" class="form-control">
    <input type="text" class="form-control" size="10">
 </div>
 ```

 <h4>Inline Input Decorators</h4>

 Inline inputs sometimes need decorators `.input-decorators` between the inputs for such things as phone number, birth date, social
 security number, or any other custom application. These are the available classes and functions.

 <div class="table-container">
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Class</th>
                <th>Funciton</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>`.input-decorator`</td>
                <td>An input decorator is used mainly for symbols and special characters, but is also
                the base for using text with additional options. This class adds `padding` to the left and right
                and also sets the `line-height` of the decorator to the height of the input.</td>
            </tr>
            <tr>
                <td>`.text-decorator`</td>
                <td>This is the modifier that need to be added to `.input-decorator` to accommodate for textual
                 decorators. It sets the `font-size` to small and lightens up the color just a bit</td>
            </tr>
            <tr>
                <td>`.input-stretch`</td>
                <td>This modifier can be place on to any input within the `.input-inline` group. It will set
                it's width to 100%, so that it takes up all remaining space. You can add this to multiple inputs
                and they will split the remaining space evenly.</td>
            </tr>
            <tr>
                <td>`.input-decorator-left`</td>
                <td>This is used if placing a decorator on the left side of an input and you want it to visually
                be closer to that input that the previous input. It reduces the `padding-right` of the decorator</td>
            </tr>
            <tr>
                <td>`.input-decorator-right`</td>
                <td>This is used if placing a decorator on the right side of an input and you want it to visually
                be closer to that input that the next input. It reduces the `padding-left` of the decorator</td>
            </tr>
            <tr>
                <td>`.input-decorator-first`</td>
                <td>This is used if placing a decorator at the very beginning of a row. It removes the
                `padding-left` of the decorator so that there is no white space between the beginning of the
                row and the decorator.</td>
            </tr>
            <tr>
                <td>`.input-decorator-last`</td>
                <td>This is used if placing a decorator at the very end of a row. It removes the
                `padding-right` of the decorator so that there is no white space between the end of the
                row and the decorator.</td>
            </tr>
        </tbody>
    </table>
 </div>


 ```
 <div class="input-inline">
    <span class="input-decorator input-decorator-left input-decorator-first">(</span>
    <input type="text" class="form-control" size="3">
    <span class="input-decorator input-decorator-right">)</span>
    <input type="text" class="form-control" size="3">
    <span class="input-decorator">-</span>
    <input type="text" class="form-control input-stretch">
    <span class="input-decorator text-decorator">Ext.</span>
    <input type="text" class="form-control" size="10">
    <span class="input-decorator text-decorator input-decorator-last">?</span>
 </div>
 ```


 <h3>Help Text</h3>

 Block level help text for form controls. Nesting `.help-text` within a `.help-block` allows you to place help text
 on the left or right side of your input.
 ```
 <div class="form-group">
    <label for="helpTextInput">Input with Help Text</label>
    <input type="email" class="form-control" id="helpTextInput">
    <div class="help-block">
        <span class="help-text">A block of help text that breaks onto a new line and may extend beyond one line</span>
        <span class="help-text help-text-right">More Help Text</span>
    </div>
 </div>
 ```



 <h3>Disabled State</h3>

 Add the `disabled` boolean attribute on an input to prevent user interactions. Disabled inputs
 appear lighter and add a not-allowed cursor.
 ```
 <div class="form-group">
    <label>Inputs</label>
    <input type="text" class="form-control" disabled>
 </div>

 <div class="form-group">
    <label>Textarea</label>
    <textarea rows="3" class="form-control" disabled></textarea>
 </div>

 <div class="form-group">
    <label>Select</label>
    <select class="form-control" disabled>
        <option>1</option>
        <option>2</option>
        <option>3</option>
        <option>4</option>
        <option>5</option>
    </select>
 </div>

 <div class="checkbox-group">
    <label>This is a group of disabled checkboxes</label>
    <div class="checkbox">
        <input type="checkbox" value="" id="disabledCheckbox1" checked disabled>
        <label for="disabledCheckbox1">Option one is this and that&mdash;be sure to include why it's great</label>
    </div>
    <div class="checkbox">
        <input type="checkbox" value="" id="disabledCheckbox2" disabled>
        <label for="disabledCheckbox2">Option tis almost as great as option one</label>
    </div>
 </div>

 <div class="radio-group">
    <label>This is a group of disabled radio buttons</label>
    <div class="radio">
        <input type="radio" name="disabledRadios" id="disabledRadio1" value="option1" checked disabled>
        <label for="disabledRadio1">
            Option one is this and that&mdash;be sure to include why it's great
        </label>
    </div>
    <div class="radio">
        <input type="radio" name="disabledRadios" id="disabledRadio2" value="option2" disabled>
        <label for="disabledRadio2">
            Option two can be something else and selecting it will deselect option one
        </label>
    </div>
 </div>
 ```

 <h3>Validation States</h3>

 Validation styles for error, warning, and success states on form controls.
 To use, add `.has-info`, `.has-warning`, `.has-error`, or `.has-success` to the parent element. Any
 `.form-control`, within that element will receive the validation styles. You can also apply these styles directly to
 any `.help-block` or `.help-text` to show validation in your messages as well.


 ```
 <div class="form-group has-info">
    <label>Input with Info</label>
    <input type="text" value="this is my text" class="form-control" id="exampleInputEmail1"
           placeholder="Email">
    <div class="help-block">
        <span class="help-text ">A block of help text that breaks onto a new line and may extend beyond one line.</span>
        <span class="help-text help-text-right text-nowrap">52/4000</span>
    </div>
 </div>

 <div class="form-group has-success">
    <label>Input with Success</label>
    <input type="text" value="this is my text" class="form-control" id="exampleInputEmail1"
           placeholder="Email">
    <div class="help-block">
        <span class="help-text has-success">A block of help text that breaks onto a new line and may extend beyond one line.</span>
        <span class="help-text help-text-right text-nowrap">52/4000</span>
    </div>
 </div>

 <div class="form-group has-warning">
    <label>Input with Warning</label>
    <input type="text" value="this is my text" class="form-control" id="exampleInputEmail1"
           placeholder="Email">
    <div class="help-block">
        <span class="help-text">A block of help text that breaks onto a new line and may extend beyond one line.</span>
        <span class="help-text help-text-right text-nowrap has-warning">52/4000</span>
    </div>
 </div>

 <div class="form-group has-error">
    <label>Input with Error</label>
    <input type="text" value="this is my text" class="form-control" id="exampleInputEmail1"
           placeholder="Email">
    <div class="help-block has-error">
        <span class="help-text ">A block of help text that breaks onto a new line and may extend beyond one line.</span>
        <span class="help-text help-text-right text-nowrap">52/4000</span>
    </div>
 </div>
 ```

 */
