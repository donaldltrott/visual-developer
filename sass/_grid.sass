//
// Grid system
// --------------------------------------------------


// Container widths
//
// Set the container width, and override it for fixed navbars in media queries.

.container
    @include container-fixed

    @media (min-width: $screen-sm-min)
        width: $container-sm

    @media (min-width: $screen-md-min)
        width: $container-md

    @media (min-width: $screen-lg-min)
        width: $container-lg

    @media (min-width: $screen-xl-min)
        width: $container-xl

.container-fluid
    @include container-fixed

// Row
//
// Rows contain and clear the floats of your columns.
@mixin grid-steps($padding: $grid-gutter-width, $margin: 0rem)
    @include make-grid-columns($padding, $margin)
    @include make-grid(xs, $margin)
    @media (min-width: $screen-sm-min)
        @include make-grid(sm, $margin)

    @media (min-width: $screen-md-min)
        @include make-grid(md, $margin)

    @media (min-width: $screen-lg-min)
        @include make-grid(lg, $margin)

    @media (min-width: $screen-xl-min)
        @include make-grid(xl, $margin)

.row
    @include make-row
    @include grid-steps

    &.gutters
        @include grid-steps(0, $grid-gutter-width)

.row-tight
    @include make-row($grid-gutter-width-md)
    @include grid-steps($grid-gutter-width-md)
    &.gutters
        @include grid-steps(0, $grid-gutter-width-md)

/*
 ## Grid System

 <p class="lead">Included is a responsive, mobile first fluid grid system that appropriately scales up to 12 columns
 as the device or viewport size increases. It includes __predefined classes__ for easy layout options, as
 well as powerful __mixins for generating more semantic layouts__.</p>


 <h3>Introduction</h3>

 Grid systems are used for creating page layouts through a series of rows and columns that house your content. Here's
 how the grid system works:

 <ul>
    <li>Rows must be placed within a <code>.container</code> (fixed-width) or <code>.container-fluid</code> (full-width) for proper alignment and padding.</li>
    <li>Use rows to create horizontal groups of columns.</li>
    <li>Content should be placed within columns, and only columns may be immediate children of rows.</li>
    <li>Predefined grid classes like <code>.row</code> and <code>.col-xs-4</code> are available for quickly making grid
    layouts. Less mixins can also be used for more semantic layouts.</li>
    <li>Columns create gutters (gaps between column content) via <code>padding</code>. That padding is offset in rows
    for the first and last column via negative margin on <code>.row</code>s.</li>
    <li>The negative margin is why the examples below are outdented. It's so that content within grid columns is lined
    up with non-grid content.</li>
    <li>Grid columns are created by specifying the number of twelve available columns you wish to span. For example,
    three equal columns would use three <code>.col-xs-4</code>.</li>
    <li>If more than 12 columns are placed within a single row, each group of extra columns will, as one unit, wrap
    onto a new line.</li>
    <li>Grid classes apply to devices with screen widths greater than or equal to the breakpoint sizes, and override
    grid classes targeted at smaller devices. Therefore, e.g. applying any <code>.col-md-&#42;</code> class to an element
    will not only affect its styling on medium devices but also on large devices if a <code>.col-xl-&#42;</code> class
    is not present.</li>
 </ul>

 Look to the examples for applying these principles to your code.



 <h3>Containers</h3>

 Visual Developer requires a containing element to wrap site contents and house our grid system. You may choose one of two
 containers to use in your projects. Note that, due to `padding`, `margins`, and more, neither container is nestable.

 Use `.container` for a responsive fixed width container.

 <pre class="stand-alone"> <span class="tag">&lt;<span class="title">div class="container"</span>&gt;</span>
    ...
 <span class="tag">&lt;/<span class="title">div</span>&gt;</span></pre>

 Use `.container-fluid` for a full width container, spanning the entire width of your viewport.

 <pre class="stand-alone"> <span class="tag">&lt;<span class="title">div class="container-fluid"</span>&gt;</span>
    ...
 <span class="tag">&lt;/<span class="title">div</span>&gt;</span></pre>


 <h3>Rows</h3>

 <h4>Standard Row</h4>

 TBD
 <div class="grid-demo"></div>
 ```
 <div class="row">
    <div class="col-md">Content</div>
    <div class="col-md">Content</div>
    <div class="col-md">Content</div>
 </div>
 ```


 <h4>Row with Gutters</h4>

 TBD
 <div class="grid-demo"></div>
 ```
 <div class="row gutters">
    <div class="col-md">Content</div>
    <div class="col-md">Content</div>
    <div class="col-md">Content</div>
 </div>
 ```



 <h4>Row Sizing</h4>

 TBD
 <div class="grid-demo"></div>
 ```
 <div class="row-tight">
    <div class="col-md">Content</div>
    <div class="col-md">Content</div>
    <div class="col-md">Content</div>
 </div>
 ```



 <h3>Horizontal Grid Options</h3>

 See how aspects of the grid system work across multiple devices with a handy table.

 <div class="table-container">
     <table class="table table-bordered table-striped">
        <thead>
            <tr>
                <th></th>
                <th>Extra Small<span class="table-meta">0 - 479px</span></th>
                <th>Small<span class="table-meta">480px - 767px</span></th>
                <th>Medium<span class="table-meta">768px - 991px</span></th>
                <th>Large<span class="table-meta">992px - 1199px</span></th>
                <th>Extra Large<span class="table-meta">>1200px</span></th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <th>Grid Behavior</tg>
                <td>Horizontal at all times</td>
                <td colspan="4">Collapsed to start, horizontal above breakpoints</td>
            </tr>
            <tr>
                <th>Container Width</tg>
                <td>None (auto)</td>
                <td>464px</td>
                <td>752px</td>
                <td>976px</td>
                <td>1184px</td>
            </tr>
            <tr>
                <th>Class Prefix</tg>
                <td><code>.col-xs-</code></td>
                <td><code>.col-sm-</code></td>
                <td><code>.col-md-</code></td>
                <td><code>.col-lg-</code></td>
                <td><code>.col-xl-</code></td>
            </tr>
            <tr>
                <th>Gutter Width</tg>
                <td colspan="5">`24px` or `2.4rem` (`12px` or `1.2rem` on each side of the column)</td>
            </tr>
            <tr>
                <th>Nestable</tg>
                <td colspan="5">Yes</td>
            </tr>
            <tr>
                <th>Offsets</tg>
                <td colspan="5">Yes</td>
            </tr>
        </tbody>

     </table>
 </div>




 <h3>Example: Stacked-to-horizontal</h3>

 Using a single set of <code>.col-md-&#42;</code> grid classes, you can create a basic grid system that starts out stacked on mobile
 devices and tablet devices in portrait (the extra small to small range) before becoming horizontal on desktop (medium) devices.
 Place grid columns in any `.row`. In the example below you can see the default structure of the columns with within a
 `.row` showing <code class="show-padding">padding</code> on the left and right of each.
 <div class="grid-demo"></div>
 ```
 <div class="row">
    <div class="col-md-1">.col-md-1</div>
    <div class="col-md-1">.col-md-1</div>
    <div class="col-md-1">.col-md-1</div>
    <div class="col-md-1">.col-md-1</div>
    <div class="col-md-1">.col-md-1</div>
    <div class="col-md-1">.col-md-1</div>
    <div class="col-md-1">.col-md-1</div>
    <div class="col-md-1">.col-md-1</div>
    <div class="col-md-1">.col-md-1</div>
    <div class="col-md-1">.col-md-1</div>
    <div class="col-md-1">.col-md-1</div>
    <div class="col-md-1">.col-md-1</div>
 </div>
 <div class="row">
    <div class="col-md-8">.col-md-8</div>
    <div class="col-md-4">.col-md-4</div>
 </div>
 <div class="row">
    <div class="col-md-4">.col-md-4</div>
    <div class="col-md-4">.col-md-4</div>
    <div class="col-md-4">.col-md-4</div>
 </div>
 <div class="row">
    <div class="col-md-6">.col-md-6</div>
    <div class="col-md-6">.col-md-6</div>
 </div>
 ```

 */
