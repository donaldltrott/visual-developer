//
// Grid system
// --------------------------------------------------


// Container widths
//
// Set the container width, and override it for fixed navbars in media queries.

.container
    @include container-fixed

    @media (min-width: $screen-sm-min)
        width: $container-sm

    @media (min-width: $screen-md-min)
        width: $container-md

    @media (min-width: $screen-lg-min)
        width: $container-lg

    @media (min-width: $screen-xl-min)
        width: $container-xl

.container-fluid
    @include container-fixed

// Row
//
// Rows contain and clear the floats of your columns.
@mixin grid-steps($padding: $grid-gutter-width, $margin: 0rem)
    @include make-grid-columns($padding, $margin)
    @include make-grid(xs, $margin)
    @media (min-width: $screen-sm-min)
        @include make-grid(sm, $margin)

    @media (min-width: $screen-md-min)
        @include make-grid(md, $margin)

    @media (min-width: $screen-lg-min)
        @include make-grid(lg, $margin)

    @media (min-width: $screen-xl-min)
        @include make-grid(xl, $margin)

.row
    @include make-row
    @include grid-steps

    &.has-gutters
        @include grid-steps(0, $grid-gutter-width)

.row-tight
    @include make-row($grid-gutter-width-md)
    @include grid-steps($grid-gutter-width-md)
    &.has-gutters
        @include grid-steps(0, $grid-gutter-width-md)

/*
 ## Grid System

 <p class="lead">Included is a responsive, mobile first fluid grid system that appropriately scales up to 12 columns
 as the device or viewport size increases. It includes __predefined classes__ for easy layout options, as
 well as powerful __mixins for generating more semantic layouts__.</p>


 <h3>Introduction</h3>

 Grid systems are used for creating page layouts through a series of rows and columns that house your content. Here's
 how the grid system works:

 <ul>
    <li>Rows must be placed within a <code>.container</code> (fixed-width) or <code>.container-fluid</code> (full-width) for proper alignment and padding.</li>
    <li>Use rows to create horizontal groups of columns.</li>
    <li>Content should be placed within columns, and only columns may be immediate children of rows.</li>
    <li>Predefined grid classes like <code>.row</code> and <code>.col-xs-4</code> are available for quickly making grid
    layouts. SASS mixins can also be used for more semantic layouts.</li>
    <li>Columns create gutters (gaps between column content) via <code class="show-padding">padding</code> or <code class="show-margin">margin</code>. The default
    class of `.row` use <code class="show-padding">padding</code> to create the gutters within the columns, and the row option `.has-gutters` places a <code class="show-margin">margin</code>
    between each column. That gutter is offset in rows for the first and last column via negative margin on the <code>.row</code>.</li>
    <li>The negative margin is why the examples below are outdented. It's so that content within grid columns is lined
    up with non-grid content.</li>
    <li>Grid columns are created by specifying the number of twelve available columns you wish to span. For example,
    three equal columns would use three <code>.col-xs-4</code>.</li>
    <li>If more than 12 columns are placed within a single row, each group of extra columns will, as one unit, wrap
    onto a new line.</li>
    <li>Grid classes apply to devices with screen widths greater than or equal to the breakpoint sizes, and override
    grid classes targeted at smaller devices. Therefore, e.g. applying any <code>.col-md-&#42;</code> class to an element
    will not only affect its styling on medium devices but also on large devices if a <code>.col-lg-&#42;</code> or
    <code>.col-xl-&#42;</code> class is not present.</li>
 </ul>

 Look to the examples for applying these principles to your code.


 <h3>Containers</h3>

 Visual Developer requires a containing element to wrap site contents and house our grid system. You may choose one of two
 containers to use in your projects. Note that, due to `padding`, `margin`, and more, neither container is nestable.

 Use `.container` for a responsive fixed width container.

 <pre class="stand-alone"> <span class="tag">&lt;<span class="title">div class="container"</span>&gt;</span>
    ...
 <span class="tag">&lt;/<span class="title">div</span>&gt;</span></pre>

 Use `.container-fluid` for a full width container, spanning the entire width of your viewport.

 <pre class="stand-alone"> <span class="tag">&lt;<span class="title">div class="container-fluid"</span>&gt;</span>
    ...
 <span class="tag">&lt;/<span class="title">div</span>&gt;</span></pre>


 <h3>Horizontal Grid</h3>

 <h4>Row</h4>

 The class `.row` is the default class for setting up a horizontal grid. The `.row` class will define it's child `.col-` classes
 to have no space between the individual columns, but has an internal <code class="show-padding">padding</code> to create gutters between the content.
 <div class="grid-demo"></div>
 ```
 <div class="row">
    <div class="col-xs">Content</div>
    <div class="col-xs">Content</div>
    <div class="col-xs">Content</div>
 </div>
 ```


 <h4>Row with Gutters</h4>

 You can choose to go a different route by adding a modifying class of `.has-gutters` to your `.row`. This changes the layout
 of the child `.col-` elements to have a space between the elements using <code class="show-margin">margin</code> instead of padding. A good use case for
 this type of row is to be able to style the `.col-` element directly to create a row of elements that are all the same
 height no matter the height of the content.
 <div class="grid-demo"></div>
 ```
 <div class="row has-gutters">
    <div class="col-xs">Content</div>
    <div class="col-xs">Content</div>
    <div class="col-xs">Content</div>
 </div>
 ```



 <h4>Row Sizing</h4>

 The gutters that are casued by either <code class="show-padding">padding</code> or <code class="show-margin">margin</code> can be somewhat adjusted using a new type of row called `.row-tight`.
 Whether using `.has-gutters` or the default behavior the `.row-tight` reduces the getters from the default `2.4rem` or `(24px)` to
 `1.6rem` or `(16px)`.
 <div class="grid-demo"></div>
 ```
 <div class="row-tight">
    <div class="col-xs">Content</div>
    <div class="col-xs">Content</div>
    <div class="col-xs">Content</div>
 </div>

 <div class="row-tight has-gutters">
    <div class="col-xs">Content</div>
    <div class="col-xs">Content</div>
    <div class="col-xs">Content</div>
 </div>
 ```



 <h3>Horizontal Grid Options</h3>

 See how aspects of the grid system work across multiple devices with a handy table.

 <div class="table-container">
     <table class="table table-bordered table-striped">
        <thead>
            <tr>
                <th></th>
                <th>Extra Small<span class="table-meta">0 - 479px</span></th>
                <th>Small<span class="table-meta">480px - 767px</span></th>
                <th>Medium<span class="table-meta">768px - 991px</span></th>
                <th>Large<span class="table-meta">992px - 1199px</span></th>
                <th>Extra Large<span class="table-meta">>1200px</span></th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <th>Grid Behavior</tg>
                <td>Horizontal at all times</td>
                <td colspan="4">Collapsed to start, horizontal above breakpoints</td>
            </tr>
            <tr>
                <th>Container Width</tg>
                <td>None (auto)</td>
                <td>464px</td>
                <td>752px</td>
                <td>976px</td>
                <td>1184px</td>
            </tr>
            <tr>
                <th>Class Prefix</tg>
                <td><code>.col-xs-</code></td>
                <td><code>.col-sm-</code></td>
                <td><code>.col-md-</code></td>
                <td><code>.col-lg-</code></td>
                <td><code>.col-xl-</code></td>
            </tr>
            <tr>
                <th>Gutter Width `.row`</tg>
                <td colspan="5">`24px` or `2.4rem` (`12px` or `1.2rem` on each side of the column)</td>
            </tr>
            <tr>
                <th>Gutter Width `.row-tight`</tg>
                <td colspan="5">`16px` or `1.6rem` (`8px` or `0.8rem` on each side of the column)</td>
            </tr>
            <tr>
                <th>Nestable</tg>
                <td colspan="5">Yes</td>
            </tr>
            <tr>
                <th>Offsets</tg>
                <td colspan="5">Yes</td>
            </tr>
        </tbody>

     </table>
 </div>




 <h3>Fluid Grid</h3>

 Percent based widths allow fluid resizing of columns and rows.
 <div class="grid-demo"></div>
 ```
 <div class="row">
    <div class="col-xs-12">12</div>
 </div>
 <div class="row">
    <div class="col-xs-1">1</div>
    <div class="col-xs-11">11</div>
 </div>
 <div class="row">
    <div class="col-xs-2">2</div>
    <div class="col-xs-10">10</div>
 </div>
 <div class="row">
    <div class="col-xs-3">3</div>
    <div class="col-xs-9">9</div>
 </div>
 <div class="row">
    <div class="col-xs-4">4</div>
    <div class="col-xs-8">8</div>
 </div>
 <div class="row">
    <div class="col-xs-5">5</div>
    <div class="col-xs-7">7</div>
 </div>
 <div class="row">
    <div class="col-xs-6">6</div>
    <div class="col-xs-6">6</div>
 </div>
 ```




 <h3>Column Offsets</h3>

 Move columns to the right using <code>.col-md-offset-&#42;</code> classes. These classes increase the left margin of a
 column by <code>&#42;</code> columns. For example, `.col-md-offset-4` moves `.col-md-4` over four columns.
 <div class="grid-demo"></div>
 ```
 <div class="row">
    <div class="col-md-4">No Offset</div>
    <div class="col-md-4 col-md-offset-4">Offset 4</div>
 </div>
 <div class="row">
    <div class="col-md-3 col-md-offset-3">Offset 3</div>
    <div class="col-md-3 col-md-offset-3">Offset 3</div>
 </div>
 <div class="row">
    <div class="col-md-6 col-md-offset-3">Offset 3</div>
 </div>
 ```


 <h3>Auto Width</h3>

 The grid will automatically figure out the width of each column if you add a <code>col-&#42;</code>. Each breakpoint has
 its own auto class and will revert to full width on a resolution small than the breakpoint.
 <div class="grid-demo"></div>
 ```
 <div class="row">
    <div class="col-xl">Extra Large</div>
    <div class="col-xl">Extra Large</div>
 </div>
 <div class="row">
    <div class="col-lg">Large</div>
    <div class="col-lg">Large</div>
    <div class="col-lg">Large</div>
    <div class="col-lg">Large</div>
 </div>
 <div class="row">
    <div class="col-md">Medium</div>
    <div class="col-md">Medium</div>
    <div class="col-md">Medium</div>
 </div>
 <div class="row">
    <div class="col-sm">Small</div>
    <div class="col-sm">Small</div>
    <div class="col-sm">Small</div>
    <div class="col-sm">Small</div>
    <div class="col-sm">Small</div>
 </div>
 <div class="row">
    <div class="col-xs">Extra Small</div>
 </div>
 ```



 <h3>Nested Columns</h3>

 To nest your content with the default grid, add a new `.row` and set of <code>.col-sm-&#42;</code> columns within an
 existing <code>.col-sm-&#42;</code> column. Nested rows should include a set of columns that add up to 12 or fewer
 (it is not required that you use all 12 available columns).
 <div class="grid-demo"></div>
 ```
 <div class="row">
    <div class="col-xs-7">
        <div class="row">
            <div class="col-xs-3">Content</div>
            <div class="col-xs-6">Content</div>
            <div class="col-xs-3">Content</div>
        </div>
    </div>
    <div class="col-xs-5">
        <div class="row">
            <div class="col-xs-8">Content</div>
            <div class="col-xs-4">Content</div>
        </div>
    </div>
 </div>
 ```


 <h3>Alignment</h3>

 Add classes to align elements to the start or end of a row as well as the top, bottom, or center of a column.

 <h4>Start</h4>

 Align child columns to the left of the row by adding the class <code>.start-&#42;</code> to the row.
 <div class="grid-demo"></div>
 ```
 <div class="row start-md">
    <div class="col-xs-4">Start</div>
 </div>
 ```

 <h4>Center</h4>

 Align child columns to the center of the row by adding the class <code>.center-&#42;</code> to the row.
 <div class="grid-demo"></div>
 ```
 <div class="row center-md">
    <div class="col-xs-4">Center</div>
 </div>
 ```


 <h4>End</h4>

 Align child columns to the right of the row by adding the class <code>.end-&#42;</code> to the row.
 <div class="grid-demo"></div>
 ```
 <div class="row end-md">
    <div class="col-xs-4">End</div>
 </div>
 ```

 <h4>Example: Responsive Alignment</h4>

 Here is an example of using the modifiers in conjunction to achieve different alignment at different viewport sizes.
 <div class="grid-demo"></div>
 ```
 <div class="row start-lg center-md end-xl">
    <div class="col-xs-4">Moving Content</div>
 </div>
 ```


 <h4>Top</h4>

 Align child columns to the top of the row by adding the class <code>.top-&#42;</code> to the row.
 <div class="grid-demo"></div>
 ```
 <div class="row top-md">
    <div class="col-xs-6">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam cursus justo ac lorem vestibulum,
    vel luctus enim porttitor. Aenean iaculis nisl quis malesuada tincidunt. Maecenas cursus nunc quam</div>
    <div class="col-xs-6">Proin sed metus sed neque</div>
 </div>
 ```

 <h4>Middle</h4>

 Align child columns to the middle of the row by adding the class <code>.middle-&#42;</code> to the row.
 <div class="grid-demo"></div>
 ```
 <div class="row middle-md">
    <div class="col-xs-6">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam cursus justo ac lorem vestibulum,
    vel luctus enim porttitor. Aenean iaculis nisl quis malesuada tincidunt. Maecenas cursus nunc quam</div>
    <div class="col-xs-6">Proin sed metus sed neque</div>
 </div>
 ```


 <h4>Bottom</h4>

 Align child columns to the bottom of the row by adding the class <code>.bottom-&#42;</code> to the row.
 <div class="grid-demo"></div>
 ```
 <div class="row bottom-md">
    <div class="col-xs-6">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam cursus justo ac lorem vestibulum,
    vel luctus enim porttitor. Aenean iaculis nisl quis malesuada tincidunt. Maecenas cursus nunc quam</div>
    <div class="col-xs-6">Proin sed metus sed neque</div>
 </div>
 ```


 <h3>Distribution</h3>

 Add classes to distribute the contents of a row or column.

 <h4>Around</h4>

 Adding the class <code>.around-&#42;</code> will distribute unused space equally to the right and left of each column.
 <div class="grid-demo"></div>
 ```
 <div class="row around-md">
    <div class="col-xs-2">Content</div>
    <div class="col-xs-2">Content</div>
    <div class="col-xs-2">Content</div>
 </div>
 ```

 <h4>Between</h4>

 Adding the class <code>.between-&#42;</code> will distribute unused space equally in between of each the columns.
 <div class="grid-demo"></div>
 ```
 <div class="row between-md">
    <div class="col-xs-2">Content</div>
    <div class="col-xs-2">Content</div>
    <div class="col-xs-2">Content</div>
 </div>
 ```




 <h3>Reordering</h3>

 Add classes to reorder columns. Some classes are more useful when added to a row, and others when added to a child column.

 <h4>Reverse</h4>

 The class <code>.reverse-&#42;</code>, when added to a row, will reverse the order of all child columns.
 <div class="grid-demo"></div>
 ```
 <div class="row reverse-md">
    <div class="col-xs-2">One</div>
    <div class="col-xs-2">Two</div>
    <div class="col-xs-2">Three</div>
    <div class="col-xs-2">Four</div>
    <div class="col-xs-2">Five</div>
    <div class="col-xs-2">Six</div>
 </div>
 ```


 <h4>First</h4>

 Adding the class <code>.first-&#42;</code>, when added to a column, will force that column to be rendered first in the row.
 <div class="grid-demo"></div>
 ```
 <div class="row">
    <div class="col-xs-2">One</div>
    <div class="col-xs-2">Two</div>
    <div class="col-xs-2">Three</div>
    <div class="col-xs-2">Four</div>
    <div class="col-xs-2">Five</div>
    <div class="col-xs-2 first-md">Six</div>
 </div>
 ```


 <h4>Last</h4>

 Adding the class <code>.last-&#42;</code>, when added to a column, will force that column to be rendered first in the row.
 <div class="grid-demo"></div>
 ```
 <div class="row">
    <div class="col-xs-2 last-md">One</div>
    <div class="col-xs-2">Two</div>
    <div class="col-xs-2">Three</div>
    <div class="col-xs-2">Four</div>
    <div class="col-xs-2">Five</div>
    <div class="col-xs-2">Six</div>
 </div>
 ```


 */
