@mixin container-fixed($gutter: $grid-gutter-width)
    margin-right: auto
    margin-left: auto
    padding-left: ($gutter / 2)
    padding-right: ($gutter / 2)

// Creates a wrapper for a series of columns
@mixin make-row($gutter: $grid-gutter-width)
    margin-left: -($gutter / 2)
    margin-right: -($gutter / 2)
    display: flex
    flex: 0 1 auto
    flex-direction: row
    flex-wrap: wrap

@mixin make-grid-columns($gutter-padding:$grid-gutter-width,$gutter-margin:0)
    $i: 1
    $list: ".col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}, .col-xl-#{$i}"
    @for $i from (1 + 1) through $grid-columns
        $list: "#{$list}, .col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}, .col-xl-#{$i}"

    #{$list},
    .col-xs,
    .col-sm,
    .col-md,
    .col-lg,
    .col-xl
        flex: 0 0 auto
        // Prevent columns from collapsing when empty
        min-height: 0.01rem
        // Inner gutter via padding
        padding-left: ($gutter-padding / 2)
        padding-right: ($gutter-padding / 2)
        // Outer gutter via padding
        margin-left: ($gutter-margin / 2)
        margin-right: ($gutter-margin / 2)
        max-width: calc(100% - #{$gutter-margin})
        width: calc(100% - #{$gutter-margin})

@mixin calc-grid-column($index, $class, $type, $margin: 0)
    @if ($type == width) and ($index > 0)
        $percentage: percentage(($index / $grid-columns))
        .col-#{$class}-#{$index}
            -ms-flex-preferred-size: calc(#{$percentage} - #{$margin})
            flex-basis: calc(#{$percentage} - #{$margin})
            max-width: calc(#{$percentage} - #{$margin})

    @if ($type == offset) and ($index > 0)
        .col-#{$class}-offset-#{$index}
            margin-left: percentage(($index / $grid-columns))

// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin loop-grid-columns($columns, $class, $type, $margin)
    @for $i from 0 through $columns
        @include calc-grid-column($i, $class, $type, $margin)


// Create grid for specific class
@mixin make-grid($class, $margin: 0rem)
    .col-#{$class}
        flex-grow: 1
        -ms-flex-preferred-size: 0
        flex-basis: 0
        max-width: 100%

    &.center-#{$class}
        -webkit-justify-content: center
        -ms-flex-pack: center
        -webkit-box-pack: center
        justify-content: center
        text-align: center

    &.start-#{$class}
        -webkit-justify-content: flex-start
        -ms-flex-pack: start
        -webkit-box-pack: start
        justify-content: flex-start
        text-align: start

    &.end-#{$class}
        -webkit-justify-content: flex-end
        -ms-flex-pack: end
        -webkit-box-pack: end
        justify-content: flex-end
        text-align: end

    &.top-#{$class}
        -webkit-box-align: start
        -ms-flex-pack: start
        align-items: flex-start

    &.middle-#{$class}
        -webkit-box-align: center
        -ms-flex-pack: center
        align-items: center

    &.bottom-#{$class}
        -webkit-box-align: end
        -ms-flex-pack: end
        align-items: flex-end

    &.around-#{$class}
        -ms-flex-pack: distribute
        justify-content: space-around

    &.between-#{$class}
        -ms-flex-pack: justify
        justify-content: space-between

    &.reverse-#{$class}
        -webkit-box-orient: horizontal
        -webkit-box-direction: reverse
        -ms-flex-direction: row-reverse
        flex-direction: row-reverse

    .first-#{$class}
        order: -1
        -ms-flex-order: -1
        -webkit-box-ordinal-group: 0

    .last-#{$class}
        order: 1
        -ms-flex-order: 1
        -webkit-box-ordinal-group: 1

    @include loop-grid-columns($grid-columns, $class, width, $margin)
    @include loop-grid-columns($grid-columns, $class, offset, $margin)
